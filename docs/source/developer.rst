.. _instructions:

***************************
Instructions for Developers
***************************

Custom `make` Commands
======================

For developers working on the TML-CTP project, a set of custom `make` commands are available to simplify various development tasks. These commands are defined in the project's `Makefile` and automate key operations such as building Docker images, installing Python dependencies, running tests, and cleaning up the development environment.

Below is a list of the available `make` commands and their purposes:

- **`build-docker`**:
  
  Builds the Docker image for the project. This command is essential when you need to create or update the Docker container that encapsulates the TML-CTP application.

  .. code-block:: bash

     make build-docker

- **`install-python`**:
  
  Installs the Python package with pip. Use this command when you want to install the TML-CTP package and its core dependencies.

  .. code-block:: bash

     make install-python

- **`install-python-all`**:
  
  Installs the Python package along with all development dependencies. This command is particularly useful if you're setting up a development environment and need tools such as linters and testing frameworks.

  .. code-block:: bash

     make install-python-all

- **`build-python-wheel`**:
  
  Builds a Python wheel distribution of the project. The wheel file is a standard format for packaging and distributing Python code, making it easier to install and share.

  .. code-block:: bash

     make build-python-wheel

- **`clean-python-build`**:
  
  Cleans the Python build directory by removing all files generated during the build process. This command helps ensure that your next build starts from a clean slate.

  .. code-block:: bash

     make clean-python-build

- **`install-python-wheel`**:
  
  Installs the Python package from a previously built wheel file. Use this command to test the installation of your package as it would be deployed in production.

  .. code-block:: bash

     make install-python-wheel

- **`tests`**:
  
  Runs all the tests in the project. This command executes the test suite, ensuring that your code functions correctly and meets the project's requirements.

  .. code-block:: bash

     make tests

- **`clean-tests`**:
  
  Cleans up directories and files generated by test runs. This command helps maintain a clean working environment by removing temporary files and directories created during testing.

  .. code-block:: bash

     make clean-tests

- **`build-docs`**:
  
  Generates the Sphinx HTML documentation for the project. This command compiles the reStructuredText files located in the `docs/source` directory into HTML files that are stored in the `docs/build` directory.

  .. code-block:: bash

     make build-docs

- **`help`**:
  
  Lists all available `make` commands for the project. This command is a handy reference to quickly see what automation tasks are available in the `Makefile`.

  .. code-block:: bash

     make help

Running the Test Suite
======================

To ensure the integrity and functionality of the TML-CTP project, a comprehensive test suite is included. Running these tests helps verify that the code behaves as expected and meets the project's requirements.

For convenience, the test suite can be executed with a single command in a terminal where Python 3.10 is available:

.. code-block:: bash

   make tests

This command automates several key tasks to ensure that the tests are run in a clean and consistent environment:

1. **Rebuilding the Docker Image**: If necessary, the Docker image for the project is rebuilt. This ensures that the environment in which the tests run is up-to-date with the latest changes.
   
2. **Cleaning Test Directories**: The command will clean any existing test directories. This step removes any residual data from previous test runs, ensuring that the current tests start with a clean slate.
   
3. **Reinstalling the Package**: The TML-CTP package is reinstalled using `pip`. This step guarantees that the latest version of the code is used in the tests, including any recent changes or updates.
   
4. **Executing the Tests**: The tests are executed using `pytest`, a powerful testing framework for Python. This framework handles test discovery, execution, and reporting, making it easier to manage and run tests.

At the conclusion of the test run, code coverage reports are generated. These reports provide detailed insights into how much of the codebase is covered by the tests, helping to identify untested areas. The reports are saved in various formats inside the `tests/report` directory for easy access and review.